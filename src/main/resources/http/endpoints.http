@baseUrl = {{baseUrl}}
@authToken = {{authToken}}
# Manual override (optional): uncomment and paste a JWT if you want to force a specific token
# @authToken = eyJhbGciOiJIUzI1NiJ9...

####################################################################
### SECURITY
####################################################################

### Health check (open)
GET {{baseUrl}}/auth/healthcheck

### Test (open)
GET {{baseUrl}}/auth/test

### Register (returns token). If user exists, skip.
# @name register
POST {{baseUrl}}/auth/register
Content-Type: application/json

{
  "username": "testuser",
  "password": "testpass"
}

> {%
  try {
    const data = JSON.parse(response.body);
    if (data.token) {
      client.global.set("authToken", data.token);
      client.log("Saved authToken from REGISTER: " + data.token);
    } else {
      client.log("No token field in register response");
    }
  } catch (e) {
    client.log("Register parse error: " + e);
  }
%}

### Login (returns token) — run this to refresh token
# @name login
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "username": "testuser",
  "password": "testpass"
}

> {%
  try {
    const data = JSON.parse(response.body);
    if (data.token) {
      client.global.set("authToken", data.token);
      client.log("Saved authToken from LOGIN: " + data.token);
    } else {
      client.log("No token field in login response");
    }
  } catch (e) {
    client.log("Login parse error: " + e);
  }
%}

### Add ADMIN role to current user (requires USER)
# After this, run LOGIN again and add the new token to
#    "baseUrl": "http://localhost:7076/api",
#    "authToken":

POST {{baseUrl}}/auth/user/addrole
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "role": "ADMIN"
}

### Login again to get a token that includes ADMIN
# @name loginAdmin
POST {{baseUrl}}/auth/login
Content-Type: application/json

{
  "username": "testuser",
  "password": "testpass"
}

> {%
  try {
    const data = JSON.parse(response.body);
    if (data.token) {
      client.global.set("authToken", data.token);
      client.log("Saved ADMIN authToken from LOGIN: " + data.token);
    } else {
      client.log("No token field in login response");
    }
  } catch (e) {
    client.log("Login parse error: " + e);
  }
%}

### USER protected demo (needs USER)
GET {{baseUrl}}/protected/user_demo
Authorization: Bearer {{authToken}}

### ADMIN protected demo (needs ADMIN)
GET {{baseUrl}}/protected/admin_demo
Authorization: Bearer {{authToken}}

####################################################################
### ARTISTS + ALBUMS
####################################################################

### Create artist (ADMIN)
POST {{baseUrl}}/artists
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "artistName": "Demo Artist",
  "type": "Solo"
}

### Get all artists (open)
GET {{baseUrl}}/artists

### Get artist by ID (open)
GET {{baseUrl}}/artists/1

### Update artist (ADMIN)
PUT {{baseUrl}}/artists/1
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "artistName": "Updated Demo Artist",
  "type": "Band"
}

### Delete artist (ADMIN)
DELETE {{baseUrl}}/artists/1
Authorization: Bearer {{authToken}}

### Get albums for artist (open)
GET {{baseUrl}}/artists/1/albums

### Create album for artist (ADMIN) — nested route
# Replace {artistId} with the actual artist id returned from create artist
POST {{baseUrl}}/artists/13/albums
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "albumName": "Demo Album",
  "releaseDate": "2025-10-23",
  "totalDuration": "00:00:00"
}

####################################################################
### SONGS
####################################################################

### Get all songs (open)
GET {{baseUrl}}/songs

### Get song by ID (open)
GET {{baseUrl}}/songs/1

### Create song (protected; your SongDAO looks up by names)
# Ensure the artist/album above exist with those names
POST {{baseUrl}}/songs
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "songName": "Hello World",
  "albumName": "Demo Album",
  "mainArtistName": "Demo Artist",
  "genre": "POP",
  "duration": "03:45"
}

### Update song (protected)
PUT {{baseUrl}}/songs/1
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "songName": "Hello Universe",
  "albumName": "Demo Album 2",
  "mainArtistName": "Demo Artist",
  "genre": "ROCK",
  "duration": "04:15"
}

### Delete song (protected) — will fail if used by playlists unless associations are cleared
DELETE {{baseUrl}}/songs/1
Authorization: Bearer {{authToken}}

####################################################################
### PLAYLISTS
####################################################################

### Get all playlists (open)
GET {{baseUrl}}/playlists

### Get playlist by ID (open)
GET {{baseUrl}}/playlists/1

### Get playlists by username (open) skriv jonas eller asger
GET {{baseUrl}}/playlists/user/jonas

### Create playlist (protected)
POST {{baseUrl}}/playlists
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "playListName": "My Vibes",
  "ownerUsername": "testuser",
  "songIds": [1, 2, 3]
}

### Update playlist (protected)
PUT {{baseUrl}}/playlists/1
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "playListName": "Updated Vibes",
  "ownerUsername": "testuser",
  "songIds": [2, 4]
}

### Delete playlist (protected)
DELETE {{baseUrl}}/playlists/4
Authorization: Bearer {{authToken}}

####################################################################
### UTILITIES
####################################################################


